import { useEffect, useState } from 'react'
import axios from 'axios'
import { toast } from 'react-toastify'
import Select from 'react-select'
import { getAuthHeaders } from '../../../utils/authHeaders'
import { ClientDto } from '../InternalDtos'
import { SubscriptionDto } from '../InternalDtos'

type Props = {
  subscription: SubscriptionDto
  onClose: () => void
  onSuccess: () => void
}

export default function AddPurchaseModal({ subscription, onClose, onSuccess }: Props) {
  const [clients, setClients] = useState<ClientDto[]>([])
  const [selectedClientId, setSelectedClientId] = useState<number | null>(null)

  const [isAddOpen, setIsAddOpen] = useState(false)
  const [newClientName, setNewClientName] = useState('')
  const [newClientPhone, setNewClientPhone] = useState('')
  const [newClientGender, setNewClientGender] = useState('–ß–æ–ª–æ–≤—ñ–∫')

  const [isEditingClient, setIsEditingClient] = useState(false)
  const [editClientName, setEditClientName] = useState('')
  const [editClientPhone, setEditClientPhone] = useState('')
  const [editClientGender, setEditClientGender] = useState('–ß–æ–ª–æ–≤—ñ–∫')

  const [paymentMethodId, setPaymentMethodId] = useState(1)

  useEffect(() => {
    axios.get('https://localhost:7270/api/Clients')
      .then(res => setClients(res.data))
      .catch(err => console.error('–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç—ñ–≤:', err))
  }, [])

  const clientOptions = clients.map(c => ({
    value: c.clientId,
    label: `${c.clientFullName} (${c.clientPhoneNumber} ‚Ä¢ ${c.clientGender})`
  }))

  const handleAddNewClient = async () => {
    try {
      const response = await axios.post<ClientDto>(
        'https://localhost:7270/api/Clients', 
        {
          clientFullName: newClientName.trim(),
          clientPhoneNumber: newClientPhone.trim(),
          clientGender: newClientGender
        },
        {headers: getAuthHeaders()}
      )

      const newClient = {
        clientId: response.data.clientId,
        clientFullName: response.data.clientFullName,
        clientPhoneNumber: response.data.clientPhoneNumber,
        clientGender: response.data.clientGender
      }

      setClients(prev => [...prev, newClient])
      setSelectedClientId(newClient.clientId)

      setNewClientName('')
      setNewClientPhone('')
      setNewClientGender('–ß–æ–ª–æ–≤—ñ–∫')
      setIsAddOpen(false)

      toast.success('–ö–ª—ñ—î–Ω—Ç —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–∏–π!')
    } catch (error) {
      toast.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ –∫–ª—ñ—î–Ω—Ç–∞.')
    }
  }

  const handleUpdateClient = async () => {
    if (!selectedClientId) return

    try {
      await axios.put(
        `https://localhost:7270/api/Clients/${selectedClientId}`, 
        {
          clientFullName: editClientName.trim(),
          clientPhoneNumber: editClientPhone.trim(),
          clientGender: editClientGender
        },
        {headers: getAuthHeaders()}  
      )

      setClients(prev =>
        prev.map(c =>
          c.clientId === selectedClientId
            ? { ...c, clientFullName: editClientName, clientPhoneNumber: editClientPhone, clientGender: editClientGender }
            : c
        )
      )

      toast.success('–ö–ª—ñ—î–Ω—Ç –æ–Ω–æ–≤–ª–µ–Ω–∏–π!')
      setIsEditingClient(false)
    } catch (error) {
      toast.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ –∫–ª—ñ—î–Ω—Ç–∞.')
    }
  }

  const handleDeleteClient = async () => {
    if (!selectedClientId) return
    if (!confirm('–í–∏ —Ç–æ—á–Ω–æ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ —Ü—å–æ–≥–æ –∫–ª—ñ—î–Ω—Ç–∞?')) return

    try {
      await axios.delete(
        `https://localhost:7270/api/Clients/${selectedClientId}`,
        {headers: getAuthHeaders()}
      )
      setClients(prev => prev.filter(c => c.clientId !== selectedClientId))
      setSelectedClientId(null)
      toast.success('–ö–ª—ñ—î–Ω—Ç –≤–∏–¥–∞–ª–µ–Ω–∏–π!')
    } catch (error) {
      toast.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ –∫–ª—ñ—î–Ω—Ç–∞.')
    }
  }

  const handleSave = async () => {
    if (!selectedClientId) {
      toast.error('–û–±–µ—Ä—ñ—Ç—å –∫–ª—ñ—î–Ω—Ç–∞ –¥–ª—è –ø–æ–∫—É–ø–∫–∏.')
      return
    }

    try {
      await axios.post(
        'https://localhost:7270/api/Purchases', 
        {
          clientId: selectedClientId,
          subscriptionId: subscription.subscriptionId,
          paymentMethodId: paymentMethodId
        },
        {headers: getAuthHeaders()}
      )

      toast.success('–ü–æ–∫—É–ø–∫–∞ —É—Å–ø—ñ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞!')
      onSuccess()
      onClose()
    } catch (error) {
      toast.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—ñ –ø–æ–∫—É–ø–∫–∏.')
    }
  }

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex justify-center items-center z-50">
      <div className="bg-white p-6 rounded-xl shadow-lg w-[500px] flex flex-col gap-4 max-h-[90vh] overflow-y-auto">
        <h2 className="text-lg font-bold text-primary">–ù–æ–≤–∞ –ø–æ–∫—É–ø–∫–∞</h2>

        {/* –ü–æ—à—É–∫ –∫–ª—ñ—î–Ω—Ç–∞ */}
        <div>
          <p className="font-semibold mb-1">–ö–ª—ñ—î–Ω—Ç:</p>
          <Select
            options={clientOptions}
            onChange={(selected) => setSelectedClientId(selected?.value || null)}
            placeholder="–û–±–µ—Ä—ñ—Ç—å –∫–ª—ñ—î–Ω—Ç–∞..."
            isClearable
          />

          {selectedClientId && (
            <div className="flex gap-2 mt-2">
              <button
                onClick={() => {
                  const client = clients.find(c => c.clientId === selectedClientId)
                  if (client) {
                    setEditClientName(client.clientFullName)
                    setEditClientPhone(client.clientPhoneNumber)
                    setEditClientGender(client.clientGender)
                    setIsEditingClient(true)
                  }
                }}
                className="text-sm text-blue-600"
              >
                ‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏
              </button>
              <button
                onClick={handleDeleteClient}
                className="text-sm text-red-600"
              >
                üóëÔ∏è –í–∏–¥–∞–ª–∏—Ç–∏
              </button>
            </div>
          )}
        </div>

        {isEditingClient && (
          <div className="flex flex-col gap-2 mt-4 border-t pt-4">
            <p className="text-sm font-bold text-primary">–†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç–∞</p>

            <input
              type="text"
              placeholder="–ü–æ–≤–Ω–µ —ñ–º'—è"
              value={editClientName}
              onChange={(e) => setEditClientName(e.target.value)}
              className="border rounded px-3 py-2 text-sm"
            />

            <input
              type="text"
              placeholder="–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É"
              value={editClientPhone}
              onChange={(e) => setEditClientPhone(e.target.value)}
              className="border rounded px-3 py-2 text-sm"
            />

            <select
              value={editClientGender}
              onChange={(e) => setEditClientGender(e.target.value)}
              className="border rounded px-3 py-2 text-sm"
            >
              <option value="–ß–æ–ª–æ–≤—ñ–∫">–ß–æ–ª–æ–≤—ñ–∫</option>
              <option value="–ñ—ñ–Ω–∫–∞">–ñ—ñ–Ω–∫–∞</option>
            </select>

            <div className="flex gap-2">
              <button
                onClick={handleUpdateClient}
                className="bg-primary text-white px-3 py-1 rounded text-sm"
              >
                –ó–±–µ—Ä–µ–≥—Ç–∏
              </button>
              <button
                onClick={() => setIsEditingClient(false)}
                className="text-sm text-gray-500 hover:underline"
              >
                –°–∫–∞—Å—É–≤–∞—Ç–∏
              </button>
            </div>
          </div>
        )}

        {/* –ú–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç–∏ */}
        <div>
          <p className="font-semibold mb-1">–ú–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç–∏:</p>
          <select
            value={paymentMethodId}
            onChange={(e) => setPaymentMethodId(Number(e.target.value))}
            className="border rounded px-3 py-2 w-full"
          >
            <option value={1}>–ö–∞—Ä—Ç–∞</option>
            <option value={2}>–ì–æ—Ç—ñ–≤–∫–∞</option>
          </select>
        </div>

        {/* –î–æ–¥–∞—Ç–∏ –Ω–æ–≤–æ–≥–æ –∫–ª—ñ—î–Ω—Ç–∞ */}
        <div className="mt-4 border-t pt-4">
          {!isAddOpen ? (
            <button
              onClick={() => setIsAddOpen(true)}
              className="text-sm text-primary font-medium"
            >
              ‚ûï –î–æ–¥–∞—Ç–∏ –Ω–æ–≤–æ–≥–æ –∫–ª—ñ—î–Ω—Ç–∞
            </button>
          ) : (
            <div className="flex flex-col gap-2">
              <div className="flex justify-between items-center">
                <p className="text-sm font-bold text-primary">–ù–æ–≤–∏–π –∫–ª—ñ—î–Ω—Ç</p>
                <button
                  onClick={() => setIsAddOpen(false)}
                  className="text-sm text-gray-500 hover:underline"
                >
                  –°–∫–∞—Å—É–≤–∞—Ç–∏
                </button>
              </div>

              <input
                type="text"
                placeholder="–ü–æ–≤–Ω–µ —ñ–º'—è"
                value={newClientName}
                onChange={(e) => setNewClientName(e.target.value)}
                className="border rounded px-3 py-2 text-sm"
              />

              <input
                type="text"
                placeholder="–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É"
                value={newClientPhone}
                onChange={(e) => setNewClientPhone(e.target.value)}
                className="border rounded px-3 py-2 text-sm"
              />

              <select
                value={newClientGender}
                onChange={(e) => setNewClientGender(e.target.value)}
                className="border rounded px-3 py-2 text-sm"
              >
                <option value="–ß–æ–ª–æ–≤—ñ–∫">–ß–æ–ª–æ–≤—ñ–∫</option>
                <option value="–ñ—ñ–Ω–∫–∞">–ñ—ñ–Ω–∫–∞</option>
              </select>

              <button
                onClick={handleAddNewClient}
                disabled={!newClientName.trim() || !newClientPhone.trim()}
                className="mt-2 bg-primary text-white py-2 rounded hover:opacity-90 disabled:opacity-50 disabled:cursor-not-allowed"
              >
                –î–æ–¥–∞—Ç–∏ –∫–ª—ñ—î–Ω—Ç–∞
              </button>
            </div>
          )}
        </div>

        {/* –ö–Ω–æ–ø–∫–∏ */}
        <div className="flex justify-end gap-2 mt-4">
          <button onClick={onClose} className="text-gray-500 hover:underline">
            –°–∫–∞—Å—É–≤–∞—Ç–∏
          </button>
          <button
            onClick={handleSave}
            className="bg-primary text-white px-4 py-2 rounded hover:opacity-90"
          >
            –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –ø–æ–∫—É–ø–∫—É
          </button>
        </div>
      </div>
    </div>
  )
}
