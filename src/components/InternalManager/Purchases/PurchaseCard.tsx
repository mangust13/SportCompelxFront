import { useState, useRef, useEffect } from 'react'
import { PurchaseDto } from '../../../constants/types'
import { highlightMatch } from '../../../constants/highlightMatch'
import EditPurchaseModal from './EditPurchaseModal'
import axios from 'axios'
import { toast } from 'react-toastify'
import 'react-toastify/dist/ReactToastify.css'

type Props = {
  purchase: PurchaseDto
  search: string
  expandedCardId: number | null
  setExpandedCardId: (id: number | null) => void
  onDelete: (purchaseId: number) => void
}

export default function PurchaseCard({ purchase, search, expandedCardId, setExpandedCardId, onDelete }: Props) {
  const [isEditing, setIsEditing] = useState(false)
  const isExpanded = expandedCardId === purchase.purchaseNumber
  const contentRef = useRef<HTMLDivElement>(null)

  const handleExpandToggle = () => {
    setExpandedCardId(isExpanded ? null : purchase.purchaseNumber)
  }

  const handleSave = () => {
    setIsEditing(false)
  }

  const handleDelete = async () => {
    const toastId = toast.info(
      <div>
        –í–∏ —Ç–æ—á–Ω–æ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ –ø–æ–∫—É–ø–∫—É ‚Ññ{purchase.purchaseNumber}?
        <div className="flex gap-2 mt-2">
          <button
            onClick={async () => {
              try {
                await axios.delete(`https://localhost:7270/api/Purchases/${purchase.purchaseId}`)
                toast.success('–ü–æ–∫—É–ø–∫–∞ —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–∞!')
                onDelete(purchase.purchaseId)
                toast.dismiss(toastId)
              } catch (error) {
                toast.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ –ø–æ–∫—É–ø–∫–∏.')
                toast.dismiss(toastId)
              }
            }}
            className="bg-red-500 text-white px-2 py-1 rounded text-xs"
          >
            –¢–∞–∫, –≤–∏–¥–∞–ª–∏—Ç–∏
          </button>
          <button
            onClick={() => toast.dismiss(toastId)}
            className="bg-gray-300 px-2 py-1 rounded text-xs"
          >
            –°–∫–∞—Å—É–≤–∞—Ç–∏
          </button>
        </div>
      </div>,
      { autoClose: false }
    )
  }

  useEffect(() => {
    const content = contentRef.current
    if (!content) return

    if (isExpanded) {
      content.style.maxHeight = content.scrollHeight + 'px'
      content.style.opacity = '1'
    } else {
      content.style.maxHeight = '0px'
      content.style.opacity = '0'
    }
  }, [isExpanded])

  // === –°–¢–ê–¢–£–° ===
  const totalTrainings = purchase.activities.reduce((sum, a) => sum + a.activityTypeAmount, 0)
  const trainingsUsed = purchase.totalAttendances || 0
  const trainingsLeft = totalTrainings - trainingsUsed

  const termMonths = parseInt(purchase.subscriptionTerm.replace(/\D/g, ''), 10) || 0
  const expirationDate = new Date(purchase.purchaseDate)
  expirationDate.setMonth(expirationDate.getMonth() + termMonths)
  const isExpired = new Date() > expirationDate

  const isActive = !isExpired && trainingsLeft > 0

  return (
    <div className={`bg-white shadow-md rounded-xl p-4 flex flex-col gap-2 border-2 ${isActive ? 'border-green-500' : 'border-red-500'}`}>
      {/* –í–µ—Ä—Ö–Ω—ñ–π –±–ª–æ–∫ */}
      <div className="flex justify-between items-start text-sm text-gray-500">
        <span>{highlightMatch(`–ü–æ–∫—É–ø–∫–∞ ‚Ññ${purchase.purchaseNumber}`, search)}</span>
        <div className="flex items-center gap-2">
          <span className={`px-2 py-0.5 rounded text-white text-xs ${isActive ? 'bg-green-500' : 'bg-red-500'}`}>
            {isActive ? '–ê–∫—Ç–∏–≤–Ω–∏–π' : '–ù–µ–∞–∫—Ç–∏–≤–Ω–∏–π'}
          </span>
          <button className="hover:text-yellow-500" title="–†–µ–¥–∞–≥—É–≤–∞—Ç–∏" onClick={() => setIsEditing(true)}>‚úèÔ∏è</button>
          <button className="hover:text-red-500" title="–í–∏–¥–∞–ª–∏—Ç–∏" onClick={handleDelete}>üóëÔ∏è</button>
        </div>
      </div>

      {/* –ê–±–æ–Ω–µ–º–µ–Ω—Ç */}
      <div>
        <h3 className="font-bold text-lg text-primary">
          {highlightMatch(purchase.subscriptionName, search)}
        </h3>
        <p className="text-sm text-gray-700">–¶—ñ–Ω–∞: {highlightMatch(purchase.subscriptionTotalCost, search)} –≥—Ä–Ω</p>
        <p className="text-sm text-gray-700">–û–ø–ª–∞—Ç–∞: {highlightMatch(purchase.paymentMethod, search)}</p>
        <p className="text-sm text-gray-700">
          –¢–µ—Ä–º—ñ–Ω: {highlightMatch(purchase.subscriptionTerm, search)} | –ß–∞—Å:{' '}
          {highlightMatch(purchase.subscriptionVisitTime, search)}
        </p>
        <p className="text-sm text-gray-700">
          –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–æ —Ç—Ä–µ–Ω—É–≤–∞–Ω—å: <span className="font-semibold">{trainingsUsed} / {totalTrainings}</span>
        </p>
        <p className="text-sm text-gray-700">
          –¢–µ—Ä–º—ñ–Ω –¥—ñ—ó –¥–æ:{' '}
          <span className={`px-2 py-0.5 rounded text-white text-xs ${isExpired ? 'bg-red-500' : 'bg-green-500'}`}>
            {expirationDate.toLocaleDateString()}
          </span>
        </p>
      </div>

      {/* –ö–ª—ñ—î–Ω—Ç */}
      <div className="mt-2 text-sm">
        <p><span className="font-semibold">–ö–ª—ñ—î–Ω—Ç:</span> {highlightMatch(purchase.clientFullName, search)}</p>
        <p><span className="font-semibold">–°—Ç–∞—Ç—å:</span> {highlightMatch(purchase.clientGender, search)}</p>
        <p><span className="font-semibold">–¢–µ–ª–µ—Ñ–æ–Ω:</span> {highlightMatch(purchase.clientPhoneNumber, search)}</p>
      </div>

      {/* –í–∏–¥–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ */}
      <div className="mt-2 text-sm">
        <p className="font-semibold mb-1">–í–∏–¥–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ:</p>

        {!isExpanded ? (
          <>
            <p className="text-gray-700">
              {purchase.activities.map((a, i) => (
                <span key={i}>
                  {i > 0 && ', '}
                  {highlightMatch(a.activityName, search)}
                </span>
              ))}
            </p>
            <button className="text-blue-500 hover:underline text-sm mt-1" onClick={handleExpandToggle}>
              –ü–æ–∫–∞–∑–∞—Ç–∏ –±—ñ–ª—å—à–µ
            </button>
          </>
        ) : (
          <>
            <div ref={contentRef} className="expandable-content mt-2">
              <ul className="space-y-2 text-sm text-gray-700">
                {purchase.activities.map((a, i) => (
                  <li key={i} className="border p-2 rounded-md bg-gray-50">
                    <p className="font-semibold">{highlightMatch(a.activityName, search)}</p>
                    <p>–ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ç—Ä–µ–Ω—É–≤–∞–Ω—å: {a.activityTypeAmount}</p>
                    <p>–¶—ñ–Ω–∞ –∑–∞ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è: {a.activityPrice} –≥—Ä–Ω</p>
                    <p className="text-xs text-gray-600">{highlightMatch(a.activityDescription || '', search)}</p>
                  </li>
                ))}
              </ul>
            </div>
            <button className="text-blue-500 hover:underline text-sm mt-2" onClick={handleExpandToggle}>
              –ó–≥–æ—Ä–Ω—É—Ç–∏
            </button>
          </>
        )}
      </div>

      {/* –ú–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ */}
      {isEditing && (
        <EditPurchaseModal
          purchase={purchase}
          onClose={() => setIsEditing(false)}
          onSave={handleSave}
        />
      )}
    </div>
  )
}
