import { AttendanceRecordDto } from './TrainerDtos'
import { highlightMatch } from '../../utils/highlightMatch'
import { toast } from 'react-toastify'
import 'react-toastify/dist/ReactToastify.css'
import { getAuthHeaders } from '../../utils/authHeaders'
import axios from 'axios'

type Props = {
  attendance: AttendanceRecordDto
  search: string
  onEdit: () => void
  onDelete: (id: number) => void
}

export default function AttendanceCard({ attendance, search, onEdit, onDelete }: Props) {
  const handleDelete = () => {
    const toastId = toast.info(
      <div>
        –í–∏ —Ç–æ—á–Ω–æ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ —Ü–µ –≤—ñ–¥–≤—ñ–¥—É–≤–∞–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç–∞ <b>{attendance.clientFullName}</b>?
        <div className="flex gap-2 mt-2">
          <button
            onClick={async () => {
              try {
                await axios.delete(`https://localhost:7270/api/AttendanceRecord/${attendance.attendanceId}`, {headers: getAuthHeaders()})
                toast.success('–í—ñ–¥–≤—ñ–¥—É–≤–∞–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ!')
                onDelete(attendance.attendanceId)
                toast.dismiss(toastId)
              } catch {
                toast.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ')
                toast.dismiss(toastId)
              }
            }}
            className="bg-red-500 text-white px-2 py-1 rounded text-xs"
          >
            –¢–∞–∫, –≤–∏–¥–∞–ª–∏—Ç–∏
          </button>
          <button
            onClick={() => toast.dismiss(toastId)}
            className="bg-gray-300 px-2 py-1 rounded text-xs"
          >
            –°–∫–∞—Å—É–≤–∞—Ç–∏
          </button>
        </div>
      </div>,
      { autoClose: false }
    )
  }

  return (
    <div className="bg-white shadow-md rounded-xl p-3 flex flex-col gap-1 border border-gray-300">
      <div className="flex justify-between items-start text-sm text-gray-500">
        <span>{highlightMatch(`–ü–æ–∫—É–ø–∫–∞ ‚Ññ${attendance.purchaseNumber}`, search)}</span>
        <div className="flex gap-1 text-sm">
          <button
            title="–†–µ–¥–∞–≥—É–≤–∞—Ç–∏"
            className="text-yellow-500 hover:text-yellow-600"
            onClick={onEdit}>
            ‚úèÔ∏è
          </button>
          <button
            title="–í–∏–¥–∞–ª–∏—Ç–∏"
            className="text-red-500 hover:text-red-600"
            onClick={handleDelete}>
            üóëÔ∏è
          </button>
        </div>
      </div>

      <div>
        <h3 className="font-bold text-lg text-primary">
          {highlightMatch(attendance.subscriptionName, search)}
        </h3>
        <p className="text-sm text-gray-700">
          –¢–µ—Ä–º—ñ–Ω: {highlightMatch(attendance.subscriptionTerm, search)} | –ß–∞—Å: {highlightMatch(attendance.subscriptionVisitTime, search)}
        </p>
      </div>

      <div className="text-sm">
        <p className="font-semibold">–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞:</p>
        <p className="text-gray-700">
          {attendance.subscriptionActivities.map((a, i) => (
            <span key={i}>
              {i > 0 && ', '}
              {highlightMatch(a.activityName, search)}
            </span>
          ))}
        </p>
      </div>

      <div className="text-sm">
        <p><span className="font-semibold">–ö–ª—ñ—î–Ω—Ç:</span> {highlightMatch(attendance.clientFullName, search)}</p>
      </div>

      <div className="text-sm">
        <p>
          <span className="font-semibold">–õ–æ–∫–∞—Ü—ñ—è:</span> –ó–∞–ª ‚Ññ{attendance.gymNumber}, {highlightMatch(attendance.sportComplexAddress, search)}, {highlightMatch(attendance.sportComplexCity, search)}
        </p>
      </div>

      <div className="text-sm">
        <p><span className="font-semibold">–ß–∞—Å –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω—è —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è:</span> {attendance.trainingStartTime}, {attendance.trainingEndTime}</p>
        <p><span className="font-semibold">–í–∏–¥ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è:</span> {highlightMatch(attendance.trainingActivity, search)}</p>
      </div>

      <div className="text-sm">
        <p><span className="font-semibold">–î–∞—Ç–∞ —Ç–∞ —á–∞—Å –≤—ñ–¥–≤—ñ–¥—É–≤–∞–Ω–Ω—è:</span> {new Date(attendance.attendanceDateTime).toLocaleString()}</p>
      </div>
    </div>
  )
}
